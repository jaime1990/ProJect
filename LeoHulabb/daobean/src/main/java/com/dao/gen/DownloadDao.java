package main.java.com.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import main.java.com.dao.gen.Download;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Download".
*/
public class DownloadDao extends AbstractDao<Download, Long> {

    public static final String TABLENAME = "Download";

    /**
     * Properties of entity Download.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property State = new Property(1, int.class, "state", false, "STATE");
        public final static Property DownloadUrl = new Property(2, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSavePath = new Property(4, String.class, "fileSavePath", false, "FILE_SAVE_PATH");
        public final static Property Progress = new Property(5, long.class, "progress", false, "PROGRESS");
        public final static Property FileLength = new Property(6, long.class, "fileLength", false, "FILE_LENGTH");
        public final static Property AutoResume = new Property(7, boolean.class, "autoResume", false, "AUTO_RESUME");
        public final static Property AutoRename = new Property(8, boolean.class, "autoRename", false, "AUTO_RENAME");
    };


    public DownloadDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Download\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATE\" INTEGER NOT NULL ," + // 1: state
                "\"DOWNLOAD_URL\" TEXT NOT NULL ," + // 2: downloadUrl
                "\"FILE_NAME\" TEXT NOT NULL ," + // 3: fileName
                "\"FILE_SAVE_PATH\" TEXT NOT NULL ," + // 4: fileSavePath
                "\"PROGRESS\" INTEGER NOT NULL ," + // 5: progress
                "\"FILE_LENGTH\" INTEGER NOT NULL ," + // 6: fileLength
                "\"AUTO_RESUME\" INTEGER NOT NULL ," + // 7: autoResume
                "\"AUTO_RENAME\" INTEGER NOT NULL );"); // 8: autoRename
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Download\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Download entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
        stmt.bindString(3, entity.getDownloadUrl());
        stmt.bindString(4, entity.getFileName());
        stmt.bindString(5, entity.getFileSavePath());
        stmt.bindLong(6, entity.getProgress());
        stmt.bindLong(7, entity.getFileLength());
        stmt.bindLong(8, entity.getAutoResume() ? 1L: 0L);
        stmt.bindLong(9, entity.getAutoRename() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Download readEntity(Cursor cursor, int offset) {
        Download entity = new Download( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // state
            cursor.getString(offset + 2), // downloadUrl
            cursor.getString(offset + 3), // fileName
            cursor.getString(offset + 4), // fileSavePath
            cursor.getLong(offset + 5), // progress
            cursor.getLong(offset + 6), // fileLength
            cursor.getShort(offset + 7) != 0, // autoResume
            cursor.getShort(offset + 8) != 0 // autoRename
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Download entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.getInt(offset + 1));
        entity.setDownloadUrl(cursor.getString(offset + 2));
        entity.setFileName(cursor.getString(offset + 3));
        entity.setFileSavePath(cursor.getString(offset + 4));
        entity.setProgress(cursor.getLong(offset + 5));
        entity.setFileLength(cursor.getLong(offset + 6));
        entity.setAutoResume(cursor.getShort(offset + 7) != 0);
        entity.setAutoRename(cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Download entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Download entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
