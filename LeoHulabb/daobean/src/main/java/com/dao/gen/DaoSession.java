package main.java.com.dao.gen;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import main.java.com.dao.gen.Download;
import main.java.com.dao.gen.Key;
import main.java.com.dao.gen.User;
import main.java.com.dao.gen.InstallParamEntity;
import main.java.com.dao.gen.Address;

import main.java.com.dao.gen.DownloadDao;
import main.java.com.dao.gen.KeyDao;
import main.java.com.dao.gen.UserDao;
import main.java.com.dao.gen.InstallParamEntityDao;
import main.java.com.dao.gen.AddressDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig downloadDaoConfig;
    private final DaoConfig keyDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig installParamEntityDaoConfig;
    private final DaoConfig addressDaoConfig;

    private final DownloadDao downloadDao;
    private final KeyDao keyDao;
    private final UserDao userDao;
    private final InstallParamEntityDao installParamEntityDao;
    private final AddressDao addressDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        downloadDaoConfig = daoConfigMap.get(DownloadDao.class).clone();
        downloadDaoConfig.initIdentityScope(type);

        keyDaoConfig = daoConfigMap.get(KeyDao.class).clone();
        keyDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        installParamEntityDaoConfig = daoConfigMap.get(InstallParamEntityDao.class).clone();
        installParamEntityDaoConfig.initIdentityScope(type);

        addressDaoConfig = daoConfigMap.get(AddressDao.class).clone();
        addressDaoConfig.initIdentityScope(type);

        downloadDao = new DownloadDao(downloadDaoConfig, this);
        keyDao = new KeyDao(keyDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        installParamEntityDao = new InstallParamEntityDao(installParamEntityDaoConfig, this);
        addressDao = new AddressDao(addressDaoConfig, this);

        registerDao(Download.class, downloadDao);
        registerDao(Key.class, keyDao);
        registerDao(User.class, userDao);
        registerDao(InstallParamEntity.class, installParamEntityDao);
        registerDao(Address.class, addressDao);
    }
    
    public void clear() {
        downloadDaoConfig.getIdentityScope().clear();
        keyDaoConfig.getIdentityScope().clear();
        userDaoConfig.getIdentityScope().clear();
        installParamEntityDaoConfig.getIdentityScope().clear();
        addressDaoConfig.getIdentityScope().clear();
    }

    public DownloadDao getDownloadDao() {
        return downloadDao;
    }

    public KeyDao getKeyDao() {
        return keyDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public InstallParamEntityDao getInstallParamEntityDao() {
        return installParamEntityDao;
    }

    public AddressDao getAddressDao() {
        return addressDao;
    }

}
