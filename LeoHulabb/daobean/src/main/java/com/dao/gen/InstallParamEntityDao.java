package main.java.com.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "InstallParam".
*/
public class InstallParamEntityDao extends AbstractDao<InstallParamEntity, Long> {

    public static final String TABLENAME = "InstallParam";

    /**
     * Properties of entity InstallParamEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceType = new Property(1, String.class, "DeviceType", false, "DEVICE_TYPE");
        public final static Property SourceType = new Property(2, String.class, "SourceType", false, "SOURCE_TYPE");
        public final static Property OnlyNumber = new Property(3, String.class, "OnlyNumber", false, "ONLY_NUMBER");
        public final static Property CreateTime = new Property(4, Long.class, "CreateTime", false, "CREATE_TIME");
    };


    public InstallParamEntityDao(DaoConfig config) {
        super(config);
    }
    
    public InstallParamEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"InstallParam\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_TYPE\" TEXT," + // 1: DeviceType
                "\"SOURCE_TYPE\" TEXT," + // 2: SourceType
                "\"ONLY_NUMBER\" TEXT," + // 3: OnlyNumber
                "\"CREATE_TIME\" INTEGER);"); // 4: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"InstallParam\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InstallParamEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DeviceType = entity.getDeviceType();
        if (DeviceType != null) {
            stmt.bindString(2, DeviceType);
        }
 
        String SourceType = entity.getSourceType();
        if (SourceType != null) {
            stmt.bindString(3, SourceType);
        }
 
        String OnlyNumber = entity.getOnlyNumber();
        if (OnlyNumber != null) {
            stmt.bindString(4, OnlyNumber);
        }
 
        Long CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(5, CreateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InstallParamEntity readEntity(Cursor cursor, int offset) {
        InstallParamEntity entity = new InstallParamEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DeviceType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SourceType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OnlyNumber
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // CreateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InstallParamEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSourceType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOnlyNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InstallParamEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InstallParamEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
